# Generated by Django 5.2.6 on 2025-09-30 11:36

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('EventId', models.AutoField(primary_key=True, serialize=False)),
                ('EventName', models.CharField(help_text='Required. Enter the name of the event.', max_length=255, verbose_name='Event Name')),
                ('GpxFile', models.FileField(blank=True, help_text='Upload GPX file for the event route', null=True, upload_to='events/gpx_files/', verbose_name='GPX File')),
                ('Enrolled', models.PositiveIntegerField(default=0, help_text='Total number of users enrolled in this event', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Number of Enrolled Users')),
                ('Distance', models.DecimalField(decimal_places=2, default=0.0, help_text='Total distance of the event in kilometers', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Distance (km)')),
                ('Elevation', models.IntegerField(default=0, help_text='Total elevation gain in meters', verbose_name='Elevation Gain (m)')),
                ('Country', models.CharField(blank=True, help_text='Country where the event takes place', max_length=100, verbose_name='Country')),
                ('CreateTimeStamp', models.DateTimeField(auto_now_add=True, verbose_name='Creation Timestamp')),
                ('StartTimestamp', models.DateTimeField(blank=True, help_text='Scheduled start time of the event', null=True, verbose_name='Event Start Time')),
                ('EndTimestamp', models.DateTimeField(blank=True, help_text='Scheduled end time of the event', null=True, verbose_name='Event End Time')),
                ('Active', models.BooleanField(default=False, help_text='Whether the event is currently active', verbose_name='Active Status')),
                ('Type', models.CharField(choices=[('T', 'Trail'), ('R', 'Race'), ('C', 'Casual')], default='C', help_text='Type of event: Trail, Race, or Casual', max_length=1, verbose_name='Event Type')),
                ('Description', models.TextField(blank=True, help_text='Detailed description of the event', verbose_name='Event Description')),
                ('MaxParticipants', models.PositiveIntegerField(blank=True, help_text='Maximum number of participants allowed (optional)', null=True, verbose_name='Maximum Participants')),
                ('Location', models.CharField(blank=True, help_text='Specific location or venue of the event', max_length=255, verbose_name='Location')),
                ('AdminUser', models.ForeignKey(help_text='User who created/administered this event', on_delete=django.db.models.deletion.CASCADE, related_name='administered_events', to=settings.AUTH_USER_MODEL, verbose_name='Admin User')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['-CreateTimeStamp'],
            },
        ),
        migrations.CreateModel(
            name='EventAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('AssignedTimestamp', models.DateTimeField(auto_now_add=True, verbose_name='Assigned Timestamp')),
                ('Role', models.CharField(blank=True, help_text="Optional role description (e.g., 'Co-Organizer', 'Moderator')", max_length=50, verbose_name='Admin Role')),
                ('EventId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_admins', to='events.event', verbose_name='Event')),
                ('UserId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_admin_roles', to=settings.AUTH_USER_MODEL, verbose_name='Admin User')),
            ],
            options={
                'verbose_name': 'Event Administrator',
                'verbose_name_plural': 'Event Administrators',
                'ordering': ['-AssignedTimestamp'],
            },
        ),
        migrations.CreateModel(
            name='EventUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('StartTimestamp', models.DateTimeField(blank=True, help_text='When the user started the event', null=True, verbose_name='Participation Start Time')),
                ('EndTimestamp', models.DateTimeField(blank=True, help_text='When the user completed the event', null=True, verbose_name='Participation End Time')),
                ('NetTime', models.DurationField(blank=True, help_text='Net time taken to complete the event (HH:MM:SS)', null=True, verbose_name='Net Time')),
                ('EnrolledTimestamp', models.DateTimeField(auto_now_add=True, verbose_name='Enrollment Timestamp')),
                ('Completed', models.BooleanField(default=False, help_text='Whether the user has completed the event', verbose_name='Completed')),
                ('DistanceCompleted', models.DecimalField(decimal_places=2, default=0.0, help_text='Distance completed by the user in kilometers', max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Distance Completed (km)')),
                ('Notes', models.TextField(blank=True, help_text="Any notes about the user's participation", verbose_name='Participation Notes')),
                ('EventId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrolled_users', to='events.event', verbose_name='Event')),
                ('UserId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_participations', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Event Participant',
                'verbose_name_plural': 'Event Participants',
                'ordering': ['-EnrolledTimestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['Active'], name='events_even_Active_d0e875_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['Type'], name='events_even_Type_7418a3_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['StartTimestamp'], name='events_even_StartTi_e2e120_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['AdminUser'], name='events_even_AdminUs_16a473_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventadmin',
            unique_together={('EventId', 'UserId')},
        ),
        migrations.AddIndex(
            model_name='eventuser',
            index=models.Index(fields=['EventId', 'UserId'], name='events_even_EventId_006a8a_idx'),
        ),
        migrations.AddIndex(
            model_name='eventuser',
            index=models.Index(fields=['Completed'], name='events_even_Complet_dc74d1_idx'),
        ),
        migrations.AddIndex(
            model_name='eventuser',
            index=models.Index(fields=['StartTimestamp'], name='events_even_StartTi_6fc46e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='eventuser',
            unique_together={('EventId', 'UserId')},
        ),
    ]
